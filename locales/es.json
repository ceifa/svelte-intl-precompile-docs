{
  "common.or": "o",
  "common.and": "y",
  "main.title": "Svelte Intl Precompile",
  "main.subtitle": "La librería de i18n para Svelte que analiza y transforma tus traducciones en tiempo de compilación.",
  "playground.title": "Playground",
  
  "introduction.title": "Introducción",
  "introduction.subsection.why-use-it": "¿Porqué querría usarla?",
  "introduction.paragraph.why-use-it-1": "Svelte-intl-precompile es una librería de i18n para apps Svelte que busca to proporcionar todas las funcionalidades que tu app puede necesitar con el mínimo impacto tanto en el tamaño de tu app como en su velocidad de ejecución",
  "introduction.paragraph.why-use-it-2": "Para lograrlo usa una solución diference a la mayoría de librerías de internacionalización. Similarmente a como Svelte.js analiza y comprende tu código y durante la compilación lo tranforma en javascript compacto y eficiente, esta librería inspeciona tus traducciones escritas en el <a href='https://lokalise.com/blog/complete-guide-to-icu-message-format' class='text-primary underline'>ICU message syntax</a> y las compila a funciones pequeñas y optimizadas.",
  "introduction.paragraph.why-use-it-3": "Si usas todas y cada una de las funcionalidades soportadas por la por la sintaxis ICU añadirá aproximadamente 2kb a tu app tras el minificado y la compression. Si solamente usas unas pocas de las funcionalidades esa cifra puede bajar hasta tan solo 1kb",
  "introduction.paragraph.why-use-it-4": "Dado que no tiene que parsear y tokenizar tus traducciones en el navegador, es además más rápido. Como 4 veces más rápido renderizando traducciones la primera vez, y alrededor del 50% más rápido renderizando traducciones que ya se ha encontrado antes.",
  "introduction.subsection.playground": "¿¡Qué!? Enséñame el código",
  "introduction.paragraph.playground-preface": "Aquí tienes, pruébalo. Pega tus propias traducciones y observa el resultado de la compilación",
  "introduction.subsection.features": "¿Qué funcionalidades soporta?",
  "introduction.paragraph.features-1": "Todas las funcionalidades de por la sintaxis ICU están soportadas.<br>Tiene una API casi completamente compatible con",
  "introduction.paragraph.features-2": ", otra librería de internacionalización muy popular y bien diseñada para Svelte.js ",
  "introduction.paragraph.features-3": "Las principales funcionalidades incluyen:",
  "introduction.list-items.features-1": "Traducciones con interpolaciones, interpolation, seleccionar ramas de subtraducciones en base a valores y el resto de funcionalidades de ICU.",
  "introduction.list-items.features-2": "Formatear fechas, tiempos, números, ordinales y divisas, todo apoyándose en la API Intl, presente en todos los navegadores modernos y en Node.",
  "introduction.list-items.features-3": "Una API diseñada para Svelte.js que poporciona unos convenientes stores que actualizan sus valors automáticamente cuando el idioma seleccionado o las traducciones cargadas se actualizan.",
  "introduction.list-items.features-4": "Una variedad de funciones para cargar paquets de idiomas asíncronamente cuando sea necesario, utilidades para extraer el idioma predeterminado de las cabeceras de la petición HTTP en modo SSR",
  "introduction.list-items.features-5": "Tree-shaking completo de todas las utilidades arriba mencionadas que tu aplicación no use",

  "getting-started.title": "Primeros pasos",
  "getting-started.subsection.installation": "Instalación",
  "getting-started.paragraph.installation-1": "Instala svelte-intl-precompile como una dependencia de runtime de tu proyecto Svelte.",
  "getting-started.subsection.create-translations": "Crea tus tradicciones",
  "getting-started.paragraph.create-translations-1": "A continuación crea un directorio donde poner tus ficheros de traducciones. A mi me gusta usar",
  "getting-started.paragraph.create-translations-2": "en la raiz del proyecto, pero en realidad puedes colocar el directorio donde tu prefieras",
  "getting-started.paragraph.create-translations-3": "Recomiento usar ficheros .json pero puedes también crear ficheros javascript que exporten un único objeto que contiene las traducciones. Cualquiera que sea tu preferencia, las traducciones son simples cadenas con la sintaxis ICU:",
  "getting-started.paragraph.create-translations-4": "Yo prefiero el diccionario de traducciones tenga un único nivel y usar puntos para crear jerarquías como el de arriba, pero también puedes anidar objectos como a continuación:",
  "getting-started.subsection.hook-into-sveltekit": "Acomplar el compilador a SvelteKit",
  "getting-started.paragraph.hook-into-sveltekit-1": "El compilador de esta necesita integrarse en el proceso de complilado de SvelteKit de tu proyecto. Para ello añadelo a las lista de plugins de vite en tu",
  "getting-started.paragraph.hook-into-sveltekit-2": "Y ya está todo listo. Tiempo de usar la librería.",

  "configuration.title": "Configuración",
  "configuration.subsection.example": "Ejemplo de configuración",
  "configuration.link.example": "Ejemplo",
  "configuration.paragraph.example-1": "Este es el ejemplo más básico de la inicialización de la librería. Copia esto en tu",
  "configuration.paragraph.example-2": ".",
  "configuration.paragraph.example-3": "Esto es suficiente para ir empezando pero vamos a profundizar más en todas las opciones que tienes.",
  "configuration.subsection.static-locales": "Añadir idiomas estáticamente",
  "configuration.paragraph.static-locales-1": "Como en el ejemplo anterior, la manera más sencilla de añadir entradas al diccionario es simplemente importar el módulo contiendo las traducciones y añadirlas usando",
  "configuration.paragraph.static-locales-2": "Observa que a pesar de que definiste tus traducciones en un fichero JSON aquí las estamos importando como si fuesen módulos ES6 situados en ",
  "configuration.paragraph.static-locales-3": ". Esto es porque la librería ha transformado las traduccions en un módulo con funciones durante la compilación.",
  "configuration.paragraph.static-locales-4": "Esta estrategia está cargando todos esos idiomas incluso si solamente uno va a acabar siendo mostrado. Esto no suele ser un problema cuando están comenzando el desarollo de un nuevo proyecto o si tu proyecto tiene pocas tradicciones o pocos idiomas, pero cuando tu aplicación empieza a crecer debería empezar a cargar los paquetes de traducciones bajo demanda.",
  "configuration.subsection.dynamic-locales": "Añadir idiomas dinámicamente",
  "configuration.paragraph.dynamoc-locales-1": "Una ver tienes una cantidad significativa de traducciones en varios idiomas sería muy ineficiente cargar todos ellos para cada usuario cuando solamente va a utilizar el que haya seleccionado. La librería tiene una función",
  "configuration.paragraph.dynamoc-locales-2": "para dinámicamente importar idiomas cuando el usuario lo seleccione y otra función",
  "configuration.paragraph.dynamoc-locales-3": "para esperar a que la carga haya finalizado.",
  "configuration.paragraph.dynamoc-locales-4": "Si todos tus idiomas se cargan dinámicamente debes impedir que la app prosiga el renderizado hasta que el idioma inicial haya sido cargado. Revolviendo el resultado de invocarla desde la función",
  "configuration.paragraph.dynamoc-locales-5": "proporcionada por SvelteKit hará exactamente eso.",
  "configuration.subsection.init": "Idiomas inicial y de rescate",
  "configuration.paragraph.init-1": "A la invocación",
  "configuration.paragraph.init-2": "las opciones más importantes son",
  "configuration.paragraph.init-3": ". La primera determina el idioma en el que la app va a ser renderizada inicialmente y el segundo el idioma que se usará como última opción cuando una entrada no se encuentre en el diccionario del idioma actual.",
  "configuration.paragraph.init-4": "Hay muchas cosas que se pueden hacer para lograr la experiencia de usuario perfecta, como convenientemente inicializar",
  "configuration.paragraph.init-5": "al idioma seleccionado por el usuario durante el registro si ha hecho login, obtenerlo de las cookies si ya ha visitado la página anteriormente o obtenerlo de las cabecera <pre class='inline'>Accept-Language</pre> de la petición HTTP cuando renderizando en el servidor, pero la más sencilla es detectar el idioma del navegador o de la URL con las utilidades proporcionadas para ello.",
  "configuration.subsection.find-locale": "Encontar el mejor idioma",
  "configuration.paragraph.find-locale-1": "Hay múltiple estrategias válidas para seleccionar el mejor idioma para pasar a la función",
  "configuration.paragraph.find-locale-2": ". Esta librería proporciona utilidades para las estrategias más comunes:",
  "configuration.definitions.navigator": "Extrae el idioma del navegador, que a su vez es el idioma del sistema operativo.",
  "configuration.definitions.query": "Extrae el idioma en el parámetro dado de la query string de la URL.<br>P.e <pre class='inline'>getLocaleFromQueryString('lang')</pre> para <pre class='inline'>/users?sort=name&amp;dir=asc&amp;lang=es</pre>",
  "configuration.definitions.hash": "Como <pre class='inline'>getLocaleFromQueryString</pre> pero para el hash de la URL.<br>P.e <pre class='inline'>getLocaleFromHash('lang')</pre> para <pre class='inline'>/users#sort=name&amp;dir=asc&amp;lang=es</pre>",
  "configuration.definitions.path": "Extrae el idioma de los segmentos de la URL.<br>P.e <pre class='inline'>getLocaleFromPathname()</pre> para <pre class='inline'>myapp.com/en-US/users</pre>",
  "configuration.definitions.host": "Extrae el idioma del host.<br>P.e <pre class='inline'>getLocaleFromHostname()</pre> para <pre class='inline'>https://pt.myapp.com</pre>",
  "configuration.subsection.custom-formats": "Formatos personalizados",
  "configuration.paragraph.custom-formats-1": "Esta librería puede formatear números, fechas y horas. Lo hace sin añadir un tamaño significativo a tu proyecto porque utiliza la API Intl ya presente en todos los navegadores modernos y en Node.js.<br/>Por defecto tu app puede usar estos formatos pero puedes añadir los tuyos propios.",
  "configuration.paragraph.custom-formats-2": "Si queres definir tus propios formatos pásalos a incializar la librería usando la opción",
  "configuration.paragraph.custom-formats-3": ", los cuales será añadidos a los formatos por defecto listados arriba. Los formatos deben ser objetos válidos para pasar a",
  
  "usage.title": "Uso",
  "usage.paragraph.preface-1": "La API de esta librería ha sido tomada en gran parte de la excelente",
  "usage.paragraph.preface-2": ", hasta el punto de que la mayoría de proyectos puedes cambiar de svelte-i18 a svelte-intl-precompile y vice versa sin modificar tu aplicación más que actualizado el nombre de el paquede desde el que importas las funciones.",
  "usage.paragraph.preface-3": "Su API basada en \"stores\" es especialmente práctica de utilizar en las plantillas y provee el beneficio añadido de hacer toda tu aplicación ractiva, automáticamente actualizando cada traducción si el usuario cambia de idioma o se cargan nuevas traducciones. Para los siguientes ejemplos vamos a asumir que está trabajando en una aplicación que contiene las siguientes traducciones.",
  "usage.link.basic-translations": "Traducciones básicas",
  "usage.subsection.basic-translations": "Traducciones básicas: El store <pre class='inline'>$t(key, ops)</pre>.",
  "usage.paragraph.basic-translations-1": "Este store es el que utilizarás más frecuentemente. Simplemente impórtalo y usa la función que contiene, pasándole el nombre de la traducción a usar.",
  "usage.subsection.passing-arguments": "Pasar argumentos",
  "usage.paragraph.passing-arguments-1": "El segundo argumento recibido por",
  "usage.paragraph.passing-arguments-2": "es un objecto. Cualquier argumento requerido dentro de la traducción se proporciona co la opción",
  "usage.paragraph.passing-arguments-3": ".",
  "usage.paragraph.passing-arguments-4": "No hay ninguna diferencia pasando argumentos dependiendo de si van a interpolarse o usarse para computar plurales o sub-ramas, o son números o fechas para ser formateados. Todos los argumentos se pasan de la misma manera.",
  "usage.subsection.formatting": "Formatear fechas, horas y números",
  "usage.paragraph.formatting-1": "Aunque puedes pasar números, fechas y horas a tus traducciones que serán formateadas sigiendo lo que el mensaje ICU indique, la librería tambien tiene otros stores para cuando necesitas formatear directamente desde tu código.",
  "usage.subsection.other-stores": "Otros stores",
  "usage.paragraph.other-stores-1": "Hay tres stores más que vale la pena mencionar:",
  "usage.paragraph.other-stores-2": "Vamos a crear un componente para seleccionar el idioma actual",
  "usage.paragraph.other-stores-3": "El código de arriba es bastante sencillo. Tan solo iteramos la lista de idiomas disponibles en <code class='bg-code px-2'>$locales</code> y renderizamos un botón por cada uno. Haciendo click en esos botones asingará su dioma al store <code class='bg-code px-2'>$locale</code>.<br/> Todas las traducciones de la app se actualizarán sin necesidad de recargar la página.",
  "usage.definitions.other-stores-1": "Puede ser usando para leer o asignar el idioma actual. (P.e: <pre class='inline'>\"es-ES\"</pre>).",
  "usage.definitions.other-stores-2": "Contiene la lista de idiomas registrados. (P.e: <pre class='inline'>[\"es-ES\", \"en\", \"pt-BR\"]</pre>).",
  "usage.definitions.other-stores-3": "Contiene <pre class='inline'>true</pre> cuando un idioma asíncrono todavía se está cargando."
}